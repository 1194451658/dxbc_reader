r0.xyzw = tex2D(in_tex0, in.TEXCOORD2.xy).xyzw //sample_state in_tex0Sampler
r1.xyzw = r0.wxyz*CBUSE_UB_MODEL_MATERIAL_IDX.u_diffuse.wxyz
r2.xy = in.SV_Position.xy*float4(0.0625,0.0625,0.0,0.0)
r2.zw = r2.xxxy >= -r2.xxxy
r2.xy = frac(abs(r2.xy))
r2.xy = r2.zw
r2.xy = r2.xy*float4(16.0,16.0,0.0,0.0)
r2.xy = floor(r2.xyxx) //ftoi
r2.zw = float4(0,0,0,0)
r2.x = tex2D(in_texDither, r2.xy).x //ld_indexable
r1.x = r1.x >= r2.x
r1.x = r1.x == 0
if (r1.x != 0) then
    discard;
end
r2.xyz = tex2D(in_tex2, in.TEXCOORD2.xy).xyz //sample_state in_tex2Sampler
r2.xyz = r2.xyz*float4(2.0,2.0,2.0,0.0) + float4(-1.0,-1.0,-1.0,0.0)
r3.x = dot(in.TEXCOORD3.x, r2.x)
r3.y = dot(in.TEXCOORD4.y, r2.y)
r3.z = dot(in.TEXCOORD5.z, r2.z)
r1.x = dot(r3.x, r3.x)
r1.x = rsqrt(r1.x)
r2.xyz = r1.xxx*r3.xyz
r3.x = dot(CBUSE_UB_WORLD_MATRIX_IDX.u_mtxWV[0].x, r2.x)
r3.y = dot(CBUSE_UB_WORLD_MATRIX_IDX.u_mtxWV[1].y, r2.y)
r3.z = dot(CBUSE_UB_WORLD_MATRIX_IDX.u_mtxWV[2].z, r2.z)
r1.x = r3.z*CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightBlendParam.z
r4.xyz = r3.yyy*CBUSE_UB_WORLD_MATRIX_IDX.u_mtxWV[1].xyz
r4.xyz = r3.xxx*CBUSE_UB_WORLD_MATRIX_IDX.u_mtxWV[0].xyz + r4.xyz
r4.xyz = r1.xxx*CBUSE_UB_WORLD_MATRIX_IDX.u_mtxWV[2].xyz + r4.xyz
r1.x = dot(r4.x, r4.x)
r1.x = rsqrt(r1.x)
r4.xyz = r1.xxx*r4.xyz
r5.xyz = tex2D(in_tex1, in.TEXCOORD2.xy).xyz //sample_state in_tex1Sampler
r6.xy = tex2D(in_texOccl, in.TEXCOORD2.xy).yz //sample_state in_texOcclSampler
r7.xyz = in.TEXCOORD9.xyz-CBUSE_UB_CAMERA_IDX.u_eyePos.xyz
r1.x = dot(r7.x, r7.x)
r1.x = rsqrt(r1.x)
r7.xyz = r1.xxx*r7.xyz
r1.x = saturate(dot(r2.x, -r7.x))
r7.z = dot(r2.z, CBUSE_UB_CHARA_LIGHT_IDX.u_charaLightDir.z)
r3.w = -r1.x + 1.0
r7.xw = -r7.zz
r6.zw = saturate(r3.ww*r7.zw)
r4.w = saturate(in.TEXCOORD6.x)
r4.w = CBUSE_UB_CHARA_LIGHT_IDX.u_occlusionParam.y*r4.w + in.TEXCOORD6.y
r5.w = -r7.z*CBUSE_UB_CHARA_LIGHT_IDX.u_occlusionParam.y + r7.z
r5.w = r4.w + r5.w
r8.x = r5.w*0.5 + 0.5
r5.w = -r8.x + 1.0
r8.y = r6.x*r5.w + r8.x
r5.w = r7.z*CBUSE_UB_CHARA_LIGHT_IDX.u_occlusionParam.y + r7.x
r4.w = r4.w + r5.w
r4.w = r4.w*0.5 + r6.w
r7.x = -CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowColor[0].w
r7.y = -CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowColor[1].w
r6.xw = r7.xy + r8.xy
r5.w = r6.z + r8.x
r6.xz = saturate(r6.wx + float4(0.5,0.0,0.5,0.0))
r5.w = r5.w-CBUSE_UB_CHARA_LIGHT_IDX.u_charaHighLightColor.w
r5.w = saturate(r5.w*CBUSE_UB_CHARA_LIGHT_IDX.u_charaAmbient.w)
r7.xyzw = in.TEXCOORD10.xyzw/in.TEXCOORD10.wwww
r8.xyz = in.TEXCOORD11.xyz/in.TEXCOORD11.www
x0.xy = r7.xy
x0.xy = r8.xy
r9.x = ddx_coarse(r7.z)
r9.y = ddx_coarse(r8.z)
r10.x = ddy_coarse(r7.z)
r10.y = ddy_coarse(r8.z)
r9.xy = max(abs(r9.xyxx), abs(r10.xyxx))
r9.xy = r9.xy*CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowBias.zz
r9.xy = CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowBias.xx*float4(0.01,0.01,0.0,0.0) + r9.xy
r9.xy = min(r9.xyxx, CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowBias.yyyy)
r8.w = r7.z
r8.zw = r8.wz-r9.xy
r9.xz = min(r8.zzwz, float4(1.0,0.0,1.0,0.0))
x0.z = r9.x
x0.z = r9.z
r9.yw = r7.xy
x1.xyz = r9.ywx
r9.xy = r8.xy
x1.xyz = r9.xyz
x1.xyz = r9.xyz
r7.xz = float4(0,0,0,0)
while(true) {
	r8.x = r7.x < 2
	r8.y = r7.z == 0
	r8.x = r8.y & r8.x
	if (r8.x == 0) break
	r8.x = x1[r7.x + 0].x
	r8.y = x1[r7.x + 0].y
	r8.z = min(r8.y, r8.x)
	r8.x = max(r8.y, r8.x)
	r8.y = 0.000977 < r8.z
	r8.x = r8.x < 0.999023
	r8.x = r8.x & r8.y
	r7.z = r8.x & 1
	r7.x = r7.x + 1
}
r7.z = r7.x*r7.z-1
r8.w = r7.z // itof
r7.z = r8.w >= 0.0
if (r7.z!=0) {
	r7.z = r7.x-1
	r8.xyz = x1[r7.z + 0].xyz
	r9.xyzw = CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zwzw*float4(-1.0,-1.0,1.0,1.0) + r8.xyxy
	r9.x = min(r9.y, r9.x)
	r9.y = max(r9.w, r9.z)
	r9.x = saturate(-r9.x*10.24 + 1.0)
	r9.y = r9.y*1024.0-924.0
	r9.y = saturate(r9.y*0.01)
	r9.x = max(r9.y, r9.x)
	r9.y = r8.w >= 1.0
	r9.z = 0.0 >= r9.x
	r9.y = r9.z | r9.y
	if (r9.y!=0) {
		r9.y = tex2D(in_texShadow, r8.xy).x //sample_state in_texShadowSampler
		r10.xy = r8.xy + CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw
		r10.z = r8.w
		r9.z = tex2D(in_texShadow, r10.xy).x //sample_state in_texShadowSampler
		r9.y = r9.z + r9.y
		r10.xy = r8.xy-CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw
		r9.z = tex2D(in_texShadow, r10.xy).x //sample_state in_texShadowSampler
		r9.y = r9.z + r9.y
		r10.xy = CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw*float4(1.0,-1.0,0.0,0.0) + r8.xy
		r9.z = tex2D(in_texShadow, r10.xy).x //sample_state in_texShadowSampler
		r9.y = r9.z + r9.y
		r10.xy = -CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw*float4(1.0,-1.0,0.0,0.0) + r8.xy
		r9.z = tex2D(in_texShadow, r10.xy).x //sample_state in_texShadowSampler
		r9.y = r9.z + r9.y
		r9.y = r9.y*0.2
	} else {
		r7.x = r7.x < 2
		r7.x = r7.x & 1
		r7.x = r7.z + r7.x
		r10.xyz = x1[r7.x + 0].xyz
		r10.w = r7.x // itof
		r7.x = tex2D(in_texShadow, r8.xy).x //sample_state in_texShadowSampler
		r7.z = tex2D(in_texShadow, r10.xy).x //sample_state in_texShadowSampler
		r7.z = -r7.x + r7.z
		r7.x = r9.x*r7.z + r7.x
		r11.xy = r8.xy + CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw
		r12.xy = r10.xy + CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw
		r11.z = r8.w
		r7.z = tex2D(in_texShadow, r11.xy).x //sample_state in_texShadowSampler
		r12.z = r10.w
		r8.w = tex2D(in_texShadow, r12.xy).x //sample_state in_texShadowSampler
		r8.w = -r7.z + r8.w
		r7.z = r9.x*r8.w + r7.z
		r7.x = r7.z + r7.x
		r11.xy = r8.xy-CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw
		r12.xy = r10.xy-CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw
		r7.z = tex2D(in_texShadow, r11.xy).x //sample_state in_texShadowSampler
		r8.w = tex2D(in_texShadow, r12.xy).x //sample_state in_texShadowSampler
		r8.w = -r7.z + r8.w
		r7.z = r9.x*r8.w + r7.z
		r7.x = r7.z + r7.x
		r11.xy = CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw*float4(1.0,-1.0,0.0,0.0) + r8.xy
		r12.xy = CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw*float4(1.0,-1.0,0.0,0.0) + r10.xy
		r7.z = tex2D(in_texShadow, r11.xy).x //sample_state in_texShadowSampler
		r8.w = tex2D(in_texShadow, r12.xy).x //sample_state in_texShadowSampler
		r8.w = -r7.z + r8.w
		r7.z = r9.x*r8.w + r7.z
		r7.x = r7.z + r7.x
		r11.xy = -CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw*float4(1.0,-1.0,0.0,0.0) + r8.xy
		r12.xy = -CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw*float4(1.0,-1.0,0.0,0.0) + r10.xy
		r7.z = tex2D(in_texShadow, r11.xy).x //sample_state in_texShadowSampler
		r8.x = tex2D(in_texShadow, r12.xy).x //sample_state in_texShadowSampler
		r8.x = -r7.z + r8.x
		r7.z = r9.x*r8.x + r7.z
		r7.x = r7.z + r7.x
		r9.y = r7.x*0.2
	}
} else {
	r9.y = 0
}
r7.x = r7.w*0.05
r7.x = r7.y < r7.x
r7.zw = r7.xxxx & float4(0,0,1,0x3f800000)
r7.xy = x0[r7.z + 0].xy
r7.w = tex2D(in_texShadow, r7.xy).x //sample_state in_tex0Sampler
r7.xy = -r7.xy + float4(0.5,0.5,0.0,0.0)
r7.x = abs(r7.y) + abs(r7.x)
r7.x = 0.5 < r7.x
r7.x = r7.x & 0x3f800000
r7.y = -r7.w + 1.0
r7.x = r7.x*r7.y + r7.w
r7.y = x0[r7.z + 0].z
r7.x = -r7.x + r7.y
r7.x = r7.x*CBUSE_UB_CHARA_LIGHT_IDX.u_charaRimOutline.z
r7.y = r7.x*r9.y
r7.xy = saturate(r7.xy*float4(1.0,100.0,0.0,0.0))
r7.x = r7.x*-r9.y + r9.y
r7.z = r9.y*CBUSE_UB_CHARA_LIGHT_IDX.u_charaRimOutline.w
r7.x = max(r7.z, r7.x)
r7.x = -r9.y + r7.x
r7.x = r7.y*r7.x + r9.y
r7.y = CBUSE_UB_CHARA_LIGHT_IDX.u_charaRimOutline.z < 0.0
r7.y = r7.y & 0x3f800000
r7.y = r9.y*r7.y
r7.y = saturate(r7.y*100.0)
r7.z = r9.y*CBUSE_UB_CHARA_LIGHT_IDX.u_charaRimOutline.w-r7.x
r7.x = r7.y*r7.z + r7.x
r7.x = r7.x*CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowParam.x
r8.xyzw = -in.TEXCOORD9.xxxx + CBUSE_UB_POINT_LIGHT_IDX.u_lightPosX.xyzw
r9.xyzw = -in.TEXCOORD9.yyyy + CBUSE_UB_POINT_LIGHT_IDX.u_lightPosY.xyzw
r10.xyzw = -in.TEXCOORD9.zzzz + CBUSE_UB_POINT_LIGHT_IDX.u_lightPosZ.xyzw
r11.xyzw = r9.xyzw*r9.xyzw
r11.xyzw = r8.xyzw*r8.xyzw + r11.xyzw
r11.xyzw = r10.xyzw*r10.xyzw + r11.xyzw
r9.xyzw = r4.yyyy*r9.xyzw
r8.xyzw = r8.xyzw*r4.xxxx + r9.xyzw
r8.xyzw = r10.xyzw*r4.zzzz + r8.xyzw
r9.xyzw = rsqrt(r11.xyzw)
r10.xyzw = r9.xyzw*r11.xyzw-CBUSE_UB_POINT_LIGHT_IDX.u_lightAttenuation.xyzw
r10.xyzw = saturate(r10.xyzw/-CBUSE_UB_POINT_LIGHT_IDX.u_lightAttenuation.xyzw)
r10.xyzw = r10.xyzw*r10.xyzw
r10.xyzw = r10.xyzw*CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightToonParam.yyyy
r11.xyzw = r8.xyzw*r9.xyzw + float4(1.0,1.0,1.0,1.0)
r11.xyzw = saturate(r11.xyzw-CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightToonParam.xxxx)
r12.xyzw = saturate(r10.xyzw)
r11.xyzw = r11.xyzw*r12.xyzw
r11.xyzw = r11.xyzw*CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightToonParam.wwww
r10.xyzw = r10.xyzw*r10.xyzw
r8.xyzw = saturate(r8.xyzw*r9.xyzw-CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightToonParam.xxxx)
r8.xyzw = saturate(r10.xyzw*r8.xyzw + r11.xyzw)
r4.xyz = r8.xxx*CBUSE_UB_POINT_LIGHT_IDX.u_lightColor0.xyz
r7.yzw = r8.yyy*CBUSE_UB_POINT_LIGHT_IDX.u_lightColor1.xyz
r7.yzw = r7.yzw*CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightBlendParam.xxx
r9.xyz = r8.zzz*CBUSE_UB_POINT_LIGHT_IDX.u_lightColor2.xyz
r10.xyz = r8.www*CBUSE_UB_POINT_LIGHT_IDX.u_lightColor3.xyz
r4.xyz = r4.xyz*CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightBlendParam.xxx + r7.yzw
r4.xyz = r9.xyz*CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightBlendParam.xxx + r4.xyz
r4.xyz = r10.xyz*CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightBlendParam.xxx + r4.xyz
r7.y = r8.y + r8.x
r7.y = r8.z + r7.y
r7.y = r8.w + r7.y
r7.z = r7.y*CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightToonParam.z
r6.w = CBUSE_UB_SHADER_PARAM_IDX.u_shaderParam2.x
r8.xyzw = tex2D(in_texGrd, r6.zw).xyzw //sample_state in_texGrdSampler
r6.z = CBUSE_UB_SHADER_PARAM_IDX.u_shaderParam2.y
r9.xyzw = tex2D(in_texGrd, r6.xz).xyzw //sample_state in_texGrdSampler
r6.xzw = r8.xyz*CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowColor[0].xyz
r8.xyz = r9.xyz*CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowColor[1].xyz-r6.xzw
r6.xzw = r9.www*r8.xyz + r6.xzw
r7.w = dot(r1.y, float4(0.29891,0.58661,0.11448,0.0))
r8.x = r7.w*CBUSE_UB_CHARA_LIGHT_IDX.u_charaBlendRateParam.z
r9.xyz = r4.xyz*r8.xxx
r10.xyz = r7.www*CBUSE_UB_CHARA_LIGHT_IDX.u_charaBlendRateParam.www + CBUSE_UB_CHARA_LIGHT_IDX.u_charaAmbient.xyz
r11.xyz = -r0.xyz*CBUSE_UB_MODEL_MATERIAL_IDX.u_diffuse.xyz + r10.xyz
r1.yzw = CBUSE_UB_CHARA_LIGHT_IDX.u_charaAmbLightParam.xxx*r11.xyz + r1.yzw
r10.xyz = r10.xyz + float4(-1.0,-1.0,-1.0,0.0)
r10.xyz = CBUSE_UB_CHARA_LIGHT_IDX.u_charaAmbLightParam.yyy*r10.xyz + float4(1.0,1.0,1.0,0.0)
r11.xyz = r1.yzw*r10.xyz
r7.x = max(r7.x, r8.w)
r6.xzw = r7.www*CBUSE_UB_CHARA_LIGHT_IDX.u_charaBlendRateParam.www + r6.xzw
r8.y = in.TEXCOORD13.x*64.0
r8.z = floor(r8.y) //round_ni
r8.z = floor(r8.z) //ftou
r8.w = r8.z + 1
r8.w = min(r8.w, 64)
r8.y = frac(r8.y)
r8.z = tex2D(ro_waterWetBuffer, r8.z+0) //ld_structured
r8.w = tex2D(ro_waterWetBuffer, r8.w+0) //ld_structured
r8.w = -r8.z + r8.w
r8.y = saturate(r8.y*r8.w + r8.z)
r8.z = saturate(in.COLOR.y*100000.0)
r12.xy = saturate(-CBUSE_UB_SHADER_PARAM_IDX.u_shaderParam2.zw + float4(1.0,1.0,0.0,0.0))
r8.z = r8.z*r12.x
r8.zw = r8.zz*CBUSE_UB_CHARA_LIGHT_IDX.u_charaWaterWetParam.xy
r12.xzw = r6.xzw + float4(-1.0,0.0,-1.0,-1.0)
r13.xyz = r8.zzz*r12.xzw + float4(1.0,1.0,1.0,0.0)
r13.xyz = r11.xyz*r13.xyz + float4(-1.0,-1.0,-1.0,0.0)
r13.xyz = r8.www*r13.xyz + float4(1.0,1.0,1.0,0.0)
r2.w = 1.0
r14.x = dot(CBUSE_UB_CAMERA_IDX.u_mtxEyeSphere[0].x, r2.x)
r14.y = dot(CBUSE_UB_CAMERA_IDX.u_mtxEyeSphere[1].y, r2.y)
r2.xyz = tex2D(in_texWaterWet, r14.xy).xyz //sample_state in_texWaterWetSampler
r2.xyz = r2.xyz*r2.xyz
r2.xyz = r2.xyz*CBUSE_UB_CHARA_LIGHT_IDX.u_charaWaterWetSpcClr.xyz
r2.xyz = r12.yyy*r2.xyz
r2.xyz = r11.xyz*r13.xyz + r2.xyz
r1.yzw = -r1.yzw*r10.xyz + r2.xyz
r1.yzw = r8.yyy*r1.yzw + r11.xyz
r2.xy = r7.xx*CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowParam.zw
r6.xzw = -r1.yzw + r6.xzw
r1.yzw = r2.xxx*r6.xzw + r1.yzw
r2.xyz = r2.yyy*r12.xzw + float4(1.0,1.0,1.0,0.0)
r1.yzw = r1.yzw*r2.xyz
r2.x = r7.w*CBUSE_UB_CHARA_LIGHT_IDX.u_charaBlendRateParam.z + r6.y
r2.x = min(r2.x, 1.0)
r0.xyz = r0.xyz*CBUSE_UB_MODEL_MATERIAL_IDX.u_diffuse.xyz-r1.yzw
r0.xyz = r2.xxx*r0.xyz + r1.yzw
r1.y = r7.z*CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightBlendParam.y
r2.xyz = r4.xyz*r8.xxx-r0.xyz
r0.xyz = r1.yyy*r2.xyz + r0.xyz
r1.y = r4.w + 0.5
r1.y = r1.y-CBUSE_UB_CHARA_LIGHT_IDX.u_charaUnderRimColor.w
r1.y = saturate(r1.y*CBUSE_UB_CHARA_LIGHT_IDX.u_charaBlendRateParam.y)
r1.z = r3.w*r3.w
r1.z = saturate(r1.z*CBUSE_UB_CHARA_LIGHT_IDX.pointLightRimParam.x)
r1.z = r7.y*r1.z
r1.z = 0.3 < r1.z
r1.z = r1.z & 0x3f800000
r2.xyz = saturate(r9.xyz*CBUSE_UB_CHARA_LIGHT_IDX.pointLightRimParam.yyy)
r4.xyz = CBUSE_UB_CHARA_LIGHT_IDX.u_charaHighLightColor.xyz*r5.www + r9.xyz
r2.xyz = r2.xyz*r1.zzz + r4.xyz
r1.yzw = CBUSE_UB_CHARA_LIGHT_IDX.u_charaUnderRimColor.xyz*r1.yyy + r2.xyz
r2.xyz = r0.xyz*r1.yzw
r1.yzw = -r2.xyz*CBUSE_UB_CHARA_LIGHT_IDX.u_charaBlendRateParam.xxx + r1.yzw
r0.xyz = r0.xyz + r1.yzw
r1.y = 1.0 + CBUSE_UB_MODEL_MATERIAL_IDX.u_ambient.x
r1.z = -CBUSE_UB_CHARA_LIGHT_IDX.u_depthEdgeParam.y + CBUSE_UB_CHARA_LIGHT_IDX.u_depthEdgeParam.x
r1.z = r1.x*r1.z + CBUSE_UB_CHARA_LIGHT_IDX.u_depthEdgeParam.y
r1.z = r1.z + in.TEXCOORD2.w
r1.w = CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowParam.w + CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowParam.z
r1.w = saturate(r1.w*r7.x)
r1.z = saturate(r1.z*CBUSE_UB_CHARA_LIGHT_IDX.u_depthEdgeParam.z)
r2.xyz = tex2D(in_tex3, r14.xy).xyz //sample_state in_tex3Sampler
r4.xyz = tex2D(in_tex4, in.TEXCOORD2.xy).xyz //sample_state in_tex4Sampler
r1.w = -r1.w + 1.0
r4.xyz = r1.www*r4.xyz
r2.xyz = r2.xyz*r4.xyz
r0.xyz = r0.xyz*r1.yyy + r2.xyz
r2.xy = in.TEXCOORD8.xy/in.TEXCOORD8.ww
r2.z = -r2.y + 1.0
r1.y = tex2D(in_texScatterOccl, r2.xz).x //sample_state in_texScatterOcclSampler
r1.y = saturate(r1.y + CBUSE_UB_CAMERA_IDX.u_fogWorldParam1.y)
r4.xyz = r1.yyy*in.TEXCOORD12.xyz
out.SV_Target.xyz = r0.xyz*in.TEXCOORD12.www + r4.xyz
r0.xy = in.TEXCOORD7.xy/in.TEXCOORD7.ww
out.SV_Target.xy = -r0.xy + r2.xy
r0.x = r1.z*CBUSE_UB_CHARA_LIGHT_IDX.u_depthEdgeParam.w
r0.yz = r5.xy + float4(0.0,-0.5,-0.5,0.0)
r2.xy = saturate(r0.yz*float4(256.0,256.0,0.0,0.0))
r0.y = r5.z*in.COLOR.z
r2.z = saturate(r0.x*r0.y)
r0.x = dot(r3.x, r3.x)
r0.x = rsqrt(r0.x)
r0.xyz = r0.xxx*r3.xyz
out.SV_Target.xyz = r0.xyz*float4(0.5,0.5,0.5,0.0) + float4(0.5,0.5,0.5,0.0)
out.SV_Target.w = r0.w
out.SV_Target.z = 0
out.SV_Target.w = in.SV_Position.z
out.SV_Target.xz = in.COLOR.yx
out.SV_Target.y = r2.x
out.SV_Target.w = r1.x
out.SV_Target.xy = r2.yz
out.SV_Target.z = 0.027451
out.SV_Target.w = in.TEXCOORD2.w
out.SV_Target.w = 0
return out